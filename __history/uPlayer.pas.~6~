unit uPlayer;

interface

uses
  System.Classes, System.SysUtils;

type
  TPlayer = class
  private
    FByteLength: Int64;
    FChannel: Cardinal;
    FDuration: Cardinal;
    FPlaying: Boolean;
    FPosition: Int64;
    FVolume: Single;
    FOnStartPlaying: TNotifyEvent;
    procedure SetPosition(Value: Int64);
    procedure SetVolume(Value: Single);
  public
    constructor Create(WinHandle: THandle);
    destructor Destroy; override;
    procedure Play;
    property Length: Int64 read FByteLength;
    property Playing: Boolean read FPlaying;
    property Position: Int64 read FPosition write SetPosition;
    property Time: Cardinal read FDuration;
    property Volume: Single read FVolume write SetVolume;
    property OnStartPlaying: TNotifyEvent read FOnStartPlaying write FOnStartPlaying;
  end;

implementation

uses
  bass;

{ TPlayer }

constructor TPlayer.Create(WinHandle: THandle);
begin
  FPlaying := False;
  FVolume := 100;
  if not BASS_Init(-1, 44100, 0, WinHandle, nil) then
		raise Exception.Create('Error initializing BASS!');
end;

destructor TPlayer.Destroy;
begin
  if FChannel > 0 then BASS_ChannelFree(FChannel);
	BASS_Free();
  inherited;
end;

procedure TPlayer.Play;
begin
  FPlaying := True;

  FChannel := BASS_StreamCreateFile(FALSE, FileName, 0, 0, BASS_UNICODE);

  FByteLength := BASS_ChannelGetLength(FChannel, BASS_POS_BYTE);
  FDuration := Trunc(BASS_ChannelBytes2Seconds(FChannel, FByteLength));

  BASS_ChannelSetPosition(FChannel, FPosition, BASS_POS_BYTE);
  BASS_ChannelSetAttribute(FChannel, BASS_ATTRIB_VOL, FVolume);

  BASS_ChannelPlay(FChannel, False);
end;

procedure TPlayer.SetPosition(Value: Int64);
begin
  FPosition := Value;
end;

procedure TPlayer.SetVolume(Value: Single);
begin
  FVolume := Value;
  if (FChannel > 0) then begin
    BASS_ChannelSetAttribute(FChannel, BASS_ATTRIB_VOL, FVolume);
  end;
end;

end.
