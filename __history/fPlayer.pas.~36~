unit fPlayer;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.Buttons, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.AppEvnts, Jpeg, Vcl.Samples.Gauges, reGauge;

type
  TfrmPlayer = class(TForm)
    Image1: TImage;
    btnPrev: TSpeedButton;
    btnStop: TSpeedButton;
    btnPlay: TSpeedButton;
    btnPause: TSpeedButton;
    btnNext: TSpeedButton;
    Edit1: TEdit;
    lblTimeCode: TLabel;
    lblTimeMax: TLabel;
    tiTrayIcon: TTrayIcon;
    aeApplicationEvents: TApplicationEvents;
    pbVolume: TProgressBar;
    tmrRefresh: TTimer;
    Label1: TLabel;
    Label2: TLabel;
    btnMinimize: TSpeedButton;
    SpeedButton2: TSpeedButton;
    btnClose: TSpeedButton;
    Shape1: TShape;
    btnGetMp3Info: TButton;
    Image2: TImage;
    gageFilePosition: TreGauge;
    procedure btnPlayClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure btnStopClick(Sender: TObject);
    procedure btnPauseClick(Sender: TObject);
    procedure aeApplicationEventsMinimize(Sender: TObject);
    procedure tiTrayIconDblClick(Sender: TObject);
    procedure pbVolumeMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure tmrRefreshTimer(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure btnMinimizeClick(Sender: TObject);
    procedure btnGetMp3InfoClick(Sender: TObject);
    procedure gageFilePositionMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  private
    FChannel: Cardinal;
    FPlay: Boolean;
    procedure SetPlay(Value: Boolean);
    procedure UpdateTimeCode;
  public
    property Play: Boolean read FPlay write SetPlay;
  end;

var
  frmPlayer: TfrmPlayer;

implementation

{$R *.dfm}

uses bass, ID3v1Tags, ID3v2Tags;

{ TForm1 }

procedure TfrmPlayer.btnPlayClick(Sender: TObject);
var
	FileName: PChar;
  Time: Cardinal;
begin
  if Play then begin
    btnPause.Click;
    Exit;
  end;

  FileName := PChar(Edit1.Text);
  FChannel := BASS_StreamCreateFile(FALSE, FileName, 0, 0, BASS_UNICODE);

  gageFilePosition.MaxValue := BASS_ChannelGetLength(FChannel, BASS_POS_BYTE);

  Time := Trunc(BASS_ChannelBytes2Seconds(FChannel, gageFilePosition.MaxValue));
  lblTimeMax.Caption := Format(' %d:%.2d', [Time div 60, Time mod 60]);

  BASS_ChannelSetPosition(FChannel, gageFilePosition.Progress, BASS_POS_BYTE);
  BASS_ChannelSetAttribute(FChannel, BASS_ATTRIB_VOL, pbVolume.Position / 100);

  BASS_ChannelPlay(FChannel, False);
  Play := True;
end;

procedure TfrmPlayer.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if FChannel > 0 then BASS_ChannelFree(FChannel);
	BASS_Free();
end;

procedure TfrmPlayer.FormCreate(Sender: TObject);
begin
  Play := False;

  if not BASS_Init(-1, 44100, 0, Handle, nil) then
		raise Exception.Create('Error initializing audio!');
end;

procedure TfrmPlayer.pbVolumeMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  ClickPosition: Integer;
begin
  if (FChannel > 0) then begin
    ClickPosition := MulDiv(pbVolume.Height - Y, pbVolume.Max, pbVolume.Height) + 1;
    pbVolume.Position := ClickPosition;
    BASS_ChannelSetAttribute(FChannel, BASS_ATTRIB_VOL, pbVolume.Position / 100);
  end;
end;

procedure TfrmPlayer.gageFilePositionMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  ClickPosition: Integer;
begin
  tmrRefresh.Enabled := False;
  ClickPosition := MulDiv(X, gageFilePosition.MaxValue, gageFilePosition.Width) + 1;
  gageFilePosition.Progress := ClickPosition;
  BASS_ChannelSetPosition(FChannel, gageFilePosition.Progress, BASS_POS_BYTE);
  UpdateTimeCode;
  tmrRefresh.Enabled := True;
end;

procedure TfrmPlayer.SetPlay(Value: Boolean);
begin
  FPlay := Value;
  tmrRefresh.Enabled := Value;
end;

procedure TfrmPlayer.btnMinimizeClick(Sender: TObject);
begin
  WindowState := TWindowState.wsMinimized;
end;

procedure TfrmPlayer.btnCloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmPlayer.btnGetMp3InfoClick(Sender: TObject);
var
  id3v1: TID3v1Tag;
  id3v2: TID3v2Tag;
  stream: TMemoryStream;
  PngImage: TPngImage;
  JpegImage: TJpegImage;
begin
//  id3v1 := TID3v1Tag.Create;
//  try
//    id3v1.ReadFromFile(Edit1.Text);
//    if id3v1.TagExists then
//      ShowMessage(id3v1.Artist + ' - ' + id3v1.Title);
//  finally
//    id3v1.Free;
//  end;

  id3v2 := TID3v2Tag.Create;
  stream := TMemoryStream.Create;
  try
    id3v2.ReadFromFile(Edit1.Text);
    if id3v2.TagExists then
//      ShowMessage(id3v2.Artist + ' - ' + id3v2.Title);
//      ShowMessage(id3v2.Album);

      id3v2.GetPicture(stream, '');
      stream.Seek(0, soFromBeginning);
      JpegImage := TJpegImage.Create;
      JpegImage.LoadFromStream(stream);
      Image2.Picture.Assign(JpegImage);
  finally
    id3v2.Free;
    stream.Free;
  end;
end;

procedure TfrmPlayer.tmrRefreshTimer(Sender: TObject);
var
  Act, Pos: Cardinal;
begin
  Act := BASS_ChannelIsActive(FChannel);
  if Act > 0 then begin
		Pos := BASS_ChannelGetPosition(FChannel, BASS_POS_BYTE);
    gageFilePosition.Progress := Pos;
		UpdateTimeCode;
  end
  else begin
    BASS_ChannelSlideAttribute(FChannel, BASS_ATTRIB_VOL, 0, 200);
    while BASS_ChannelIsSliding(FChannel, BASS_ATTRIB_VOL) do
      Sleep(1);
    Play := False;
    tmrRefresh.Enabled := False;
  end;
end;

procedure TfrmPlayer.tiTrayIconDblClick(Sender: TObject);
begin
  Application.Restore;
  Application.BringToFront;
end;

procedure TfrmPlayer.UpdateTimeCode;
var
  Time: Cardinal;
begin
  if FChannel > 0 then
    Time := Trunc(BASS_ChannelBytes2Seconds(FChannel, gageFilePosition.Progress))
  else
    Time := 0;
  lblTimeCode.Caption := Format(' %d:%.2d', [Time div 60, Time mod 60]);
end;

procedure TfrmPlayer.btnStopClick(Sender: TObject);
begin
  Play := False;
  gageFilePosition.Progress := 0;
  BASS_ChannelStop(FChannel);
end;

procedure TfrmPlayer.aeApplicationEventsMinimize(Sender: TObject);
begin
  frmPlayer.Hide;
end;

procedure TfrmPlayer.btnPauseClick(Sender: TObject);
begin
  Play := False;
  BASS_ChannelPause(FChannel);
end;

end.
